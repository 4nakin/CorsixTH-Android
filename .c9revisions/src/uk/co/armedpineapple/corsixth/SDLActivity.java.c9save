{"ts":1354184433868,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n *   Copyright (C) 2012 Alan Woolley\n *   \n *   See LICENSE.TXT for full license\n */\n// $codepro.audit.disable disallowNativeMethods\npackage uk.co.armedpineapple.corsixth;\n\nimport java.io.File;\nimport java.io.FilenameFilter;\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Properties;\n\nimport javax.microedition.khronos.egl.EGL10;\nimport javax.microedition.khronos.egl.EGLConfig;\nimport javax.microedition.khronos.egl.EGLContext;\nimport javax.microedition.khronos.egl.EGLDisplay;\nimport javax.microedition.khronos.egl.EGLSurface;\n\nimport uk.co.armedpineapple.corsixth.Files.FileDetails;\nimport uk.co.armedpineapple.corsixth.Files.UnzipTask;\nimport uk.co.armedpineapple.corsixth.dialogs.DialogFactory;\nimport uk.co.armedpineapple.corsixth.dialogs.LoadDialog;\nimport uk.co.armedpineapple.corsixth.dialogs.MenuDialog;\nimport uk.co.armedpineapple.corsixth.dialogs.SaveDialog;\n\nimport com.bugsense.trace.BugSenseHandler;\n\nimport android.annotation.TargetApi;\nimport android.app.*;\nimport android.content.*;\nimport android.content.DialogInterface.OnDismissListener;\nimport android.content.SharedPreferences.Editor;\nimport android.content.pm.PackageManager.NameNotFoundException;\nimport android.view.*;\nimport android.view.inputmethod.InputMethodManager;\nimport android.widget.FrameLayout;\nimport android.widget.Toast;\nimport android.os.*;\nimport android.os.PowerManager.WakeLock;\nimport android.util.Log;\nimport android.media.*;\n\npublic class SDLActivity extends CTHActivity {\n\n\tprivate int\t\t\t\t\t\t\t\tcurrentVersion;\n\tprivate Properties\t\t\t\tproperties;\n\tpublic Configuration\t\t\tconfig;\n\tprivate WakeLock\t\t\t\t\twake;\n\tprivate MenuDialog\t\t\t\tmainMenu;\n\tprivate boolean\t\t\t\t\t\thasGameLoaded\t\t= false;\n\n\t// This is what SDL runs in. It invokes SDL_main(), eventually\n\tprivate static Thread\t\t\tmSDLThread;\n\n\t// EGL private objects\n\tprivate static EGLContext\tmEGLContext;\n\tprivate static EGLSurface\tmEGLSurface;\n\tprivate static EGLDisplay\tmEGLDisplay;\n\tprivate static EGLConfig\tmEGLConfig;\n\tprivate static int\t\t\t\tmGLMajor, mGLMinor;\n\n\t// Main components\n\tpublic static SDLActivity\tmSingleton;\n\tpublic static SDLSurface\tmSurface;\n\n\t// Audio\n\tprivate static Thread\t\t\tmAudioThread;\n\tprivate static AudioTrack\tmAudioTrack;\n\tprivate static Object\t\t\taudioBuffer;\n\n\t// Handler for the messages\n\tpublic CommandHandler\t\t\tcommandHandler\t= new CommandHandler(this);\n\n\t// Commands that can be sent from the game\n\tpublic enum Command {\n\t\tSHOW_MENU,\n\t\tSHOW_LOAD_DIALOG,\n\t\tSHOW_SAVE_DIALOG,\n\t\tRESTART_GAME,\n\t\tQUICK_LOAD,\n\t\tQUICK_SAVE,\n\t\tSHOW_KEYBOARD,\n\t\tHIDE_KEYBOARD,\n\t\tSHOW_ABOUT_DIALOG,\n\t\tPAUSE_GAME,\n\t\tSHOW_SETTINGS_DIALOG,\n\t\tGAME_SPEED_UPDATED\n\t}\n\n\t// C functions we call\n\tpublic static native void nativeInit(String logPath, String toLoad);\n\n\tpublic static native void nativeQuit();\n\n\tpublic static native void onNativeResize(int x, int y, int format);\n\n\tpublic static native void onNativeKeyDown(int keycode);\n\n\tpublic static native void onNativeKeyUp(int keycode);\n\n\tpublic static native void onNativeTouch(int touchDevId, int pointerFingerId,\n\t\t\tint action, float x, float y, float p, int pc, int gestureTriggered);\n\n\tpublic static native void onNativeAccel(float x, float y, float z);\n\n\tpublic static native void onNativeLowMemory();\n\n\tpublic static native void nativeRunAudioThread();\n\n\tpublic static native void cthRestartGame();\n\n\tpublic static native void cthSaveGame(String path);\n\n\tpublic static native void cthLoadGame(String path);\n\n\tpublic static native void cthGameSpeed(int speed);\n\n\tpublic static native void cthTryAutoSave(String filename);\n\n\tpublic static String nativeGetGamePath() {\n\t\treturn mSingleton.config.getCthPath() + \"/scripts/\";\n\t}\n\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\t// The volume buttons should change the media volume\n\t\tsetVolumeControlStream(AudioManager.STREAM_MUSIC);\n\n\t\t// Make sure that external media is mounted.\n\t\tif (Files.canAccessExternalStorage()) {\n\n\t\t\tfinal SharedPreferences preferences = getCthApplication()\n\t\t\t\t\t.getPreferences();\n\n\t\t\tconfig = getCthApplication().getConfiguration();\n\n\t\t\tcurrentVersion = preferences.getInt(\"last_version\", 0) - 1;\n\n\t\t\ttry {\n\t\t\t\tcurrentVersion = (getPackageManager().getPackageInfo(getPackageName(),\n\t\t\t\t\t\t0).versionCode);\n\n\t\t\t} catch (NameNotFoundException e) {\n\t\t\t\tBugSenseHandler.sendException(e);\n\t\t\t}\n\n\t\t\t// Check to see if the game files have been copied yet, or whether the\n\t\t\t// application has been updated\n\t\t\tif (!preferences.getBoolean(\"scripts_copied\", false)\n\t\t\t\t\t|| preferences.getInt(\"last_version\", 0) < currentVersion) {\n\n\t\t\t\tLog.d(getClass().getSimpleName(), \"This is a new installation\");\n\n\t\t\t\t// Show the recent changes dialog\n\t\t\t\tDialog recentChangesDialog = DialogFactory\n\t\t\t\t\t\t.createRecentChangesDialog(this);\n\t\t\t\trecentChangesDialog.setOnDismissListener(new OnDismissListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onDismiss(DialogInterface arg0) {\n\t\t\t\t\t\tinstallFiles(preferences);\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t\trecentChangesDialog.show();\n\n\t\t\t} else {\n\n\t\t\t\t// Continue to load the application otherwise\n\t\t\t\tloadApplication();\n\t\t\t}\n\n\t\t} else {\n\t\t\tLog.e(getClass().getSimpleName(), \"Can't get storage.\");\n\n\t\t\t// Create an alert dialog warning that external storage isn't\n\t\t\t// mounted. The application will have to exit at this point.\n\n\t\t\tDialogFactory.createExternalStorageDialog(this, true).show();\n\t\t}\n\t}\n\n\tprivate void installFiles(final SharedPreferences preferences) {\n\t\tfinal ProgressDialog dialog = new ProgressDialog(this);\n\t\tfinal UnzipTask unzipTask = new UnzipTask(config.getCthPath() + \"/scripts/\") {\n\n\t\t\t@Override\n\t\t\tprotected void onPreExecute() {\n\t\t\t\tsuper.onPreExecute();\n\t\t\t\tdialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n\t\t\t\tdialog.setMessage(getString(R.string.preparing_game_files_dialog));\n\t\t\t\tdialog.setIndeterminate(false);\n\t\t\t\tdialog.setCancelable(false);\n\t\t\t\tdialog.show();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void onProgressUpdate(Integer... values) {\n\t\t\t\tsuper.onProgressUpdate(values);\n\t\t\t\tdialog.setProgress(values[0]);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void onPostExecute(AsyncTaskResult<String> result) {\n\t\t\t\tsuper.onPostExecute(result);\n\t\t\t\tException error;\n\t\t\t\tif ((error = result.getError()) != null) {\n\t\t\t\t\tLog.d(getClass().getSimpleName(), \"Error copying files.\");\n\t\t\t\t\tBugSenseHandler.sendException(error);\n\t\t\t\t}\n\n\t\t\t\tEditor edit = preferences.edit();\n\t\t\t\tedit.putBoolean(\"scripts_copied\", true);\n\t\t\t\tedit.putInt(\"last_version\", currentVersion);\n\t\t\t\tedit.commit();\n\t\t\t\tdialog.hide();\n\t\t\t\tloadApplication();\n\t\t\t}\n\n\t\t};\n\n\t\tAsyncTask<String, Void, AsyncTaskResult<File>> copyTask = new AsyncTask<String, Void, AsyncTaskResult<File>>() {\n\n\t\t\t@Override\n\t\t\tprotected AsyncTaskResult<File> doInBackground(String... params) {\n\n\t\t\t\ttry {\n\t\t\t\t\tFiles.copyAsset(SDLActivity.this, params[0], params[1]);\n\t\t\t\t} catch (IOException e) {\n\n\t\t\t\t\treturn new AsyncTaskResult<File>(e);\n\t\t\t\t}\n\t\t\t\treturn new AsyncTaskResult<File>(new File(params[1] + \"/\" + params[0]));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void onPostExecute(AsyncTaskResult<File> result) {\n\t\t\t\tsuper.onPostExecute(result);\n\t\t\t\tFile f;\n\t\t\t\tif ((f = result.getResult()) != null) {\n\t\t\t\t\tunzipTask.execute(f);\n\t\t\t\t} else {\n\t\t\t\t\tBugSenseHandler.sendException(result.getError());\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t\tcopyTask.execute(\"game.zip\", getExternalCacheDir().getAbsolutePath());\n\n\t}\n\n\tvoid loadApplication() {\n\n\t\t// Load the libraries\n\t\tSystem.loadLibrary(\"SDL\");\n\t\tSystem.loadLibrary(\"SDL_gfx\");\n\t\tSystem.loadLibrary(\"mikmod\");\n\t\tSystem.loadLibrary(\"LUA\");\n\t\tSystem.loadLibrary(\"AGG\");\n\t\tSystem.loadLibrary(\"SDL_mixer\");\n\t\tSystem.loadLibrary(\"appmain\");\n\n\t\ttry {\n\t\t\tconfig.writeToFile();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\tLog.e(getClass().getSimpleName(), \"Couldn't write to configuration file\");\n\t\t\tBugSenseHandler.sendException(e);\n\t\t}\n\n\t\tFile f = new File(config.getSaveGamesPath());\n\n\t\tif (!f.isDirectory()) {\n\t\t\tf.mkdirs();\n\t\t}\n\n\t\t// So we can call stuff from static callbacks\n\t\tmSingleton = this;\n\n\t\tmSurface = new SDLSurface(this, config.getDisplayWidth(),\n\t\t\t\tconfig.getDisplayHeight());\n\n\t\tFrameLayout mainLayout = (FrameLayout) getLayoutInflater().inflate(\n\t\t\t\tR.layout.game, null);\n\n\t\t((FrameLayout) mainLayout.findViewById(R.id.game_frame)).addView(mSurface);\n\n\t\tsetContentView(mainLayout);\n\n\t\tSurfaceHolder holder = mSurface.getHolder();\n\t\tholder.setFixedSize(config.getDisplayWidth(), config.getDisplayHeight());\n\n\t\t// Use low profile mode if supported\n\t\tif (Build.VERSION.SDK_INT >= 11) {\n\t\t\thideSystemUi();\n\t\t}\n\n\t\thasGameLoaded = true;\n\n\t}\n\n\t@TargetApi(11)\n\tprivate void hideSystemUi() {\n\t\tgetWindow().getDecorView().setSystemUiVisibility(\n\t\t\t\tView.SYSTEM_UI_FLAG_LOW_PROFILE);\n\t}\n\n\tpublic void startApp() {\n\t\t// Start up the C app thread\n\n\t\tif (mSDLThread == null) {\n\n\t\t\tList<FileDetails> saves = null;\n\t\t\ttry {\n\t\t\t\tsaves = Files.listFilesInDirectory(config.getSaveGamesPath(),\n\t\t\t\t\t\tnew FilenameFilter() {\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic boolean accept(File dir, String filename) {\n\t\t\t\t\t\t\t\treturn filename.toLowerCase(Locale.US).endsWith(\".sav\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t} catch (IOException e) {}\n\n\t\t\tif (saves != null && saves.size() > 0) {\n\t\t\t\tCollections.sort(saves, Collections.reverseOrder());\n\n\t\t\t\tfinal String loadPath = saves.get(0).getFileName();\n\n\t\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\t\tbuilder.setMessage(R.string.load_last_save);\n\t\t\t\tbuilder.setCancelable(false);\n\t\t\t\tbuilder.setPositiveButton(R.string.yes, new Dialog.OnClickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\n\t\t\t\t\t\tmSDLThread = new Thread(new SDLMain(config.getCthPath(), loadPath),\n\t\t\t\t\t\t\t\t\"SDLThread\");\n\t\t\t\t\t\tmSDLThread.start();\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t\tbuilder.setNegativeButton(R.string.no, new Dialog.OnClickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tmSDLThread = new Thread(new SDLMain(config.getCthPath(), \"\"),\n\t\t\t\t\t\t\t\t\"SDLThread\");\n\t\t\t\t\t\tmSDLThread.start();\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t\tbuilder.create().show();\n\n\t\t\t} else {\n\n\t\t\t\tmSDLThread = new Thread(new SDLMain(config.getCthPath(), \"\"),\n\t\t\t\t\t\t\"SDLThread\");\n\t\t\t\tmSDLThread.start();\n\t\t\t}\n\n\t\t}\n\t}\n\n\t// EGL functions\n\tpublic static boolean initEGL(int majorVersion, int minorVersion) {\n\t\tif (SDLActivity.mEGLDisplay == null) {\n\t\t\tLog.v(SDLActivity.class.getSimpleName(), \"Starting up OpenGL ES \"\n\t\t\t\t\t+ majorVersion + \".\" + minorVersion);\n\n\t\t\ttry {\n\t\t\t\tEGL10 egl = (EGL10) EGLContext.getEGL();\n\n\t\t\t\tEGLDisplay dpy = egl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);\n\n\t\t\t\tint[] version = new int[2];\n\t\t\t\tegl.eglInitialize(dpy, version);\n\n\t\t\t\tint EGL_OPENGL_ES_BIT = 1;\n\t\t\t\tint EGL_OPENGL_ES2_BIT = 4;\n\t\t\t\tint renderableType = 0;\n\t\t\t\tif (majorVersion == 2) {\n\t\t\t\t\trenderableType = EGL_OPENGL_ES2_BIT;\n\t\t\t\t} else if (majorVersion == 1) {\n\t\t\t\t\trenderableType = EGL_OPENGL_ES_BIT;\n\t\t\t\t}\n\n\t\t\t\tint[] configSpec = {\n\t\t\t\t\t\t// EGL10.EGL_DEPTH_SIZE, 16,\n\t\t\t\t\t\tEGL10.EGL_RENDERABLE_TYPE, renderableType, EGL10.EGL_NONE };\n\t\t\t\tEGLConfig[] configs = new EGLConfig[1];\n\t\t\t\tint[] num_config = new int[1];\n\t\t\t\tif (!egl.eglChooseConfig(dpy, configSpec, configs, 1, num_config)\n\t\t\t\t\t\t|| num_config[0] == 0) {\n\t\t\t\t\tLog.e(SDLActivity.class.getSimpleName(), \"No EGL config available\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tEGLConfig config = configs[0];\n\n\t\t\t\tSDLActivity.mEGLDisplay = dpy;\n\t\t\t\tSDLActivity.mEGLConfig = config;\n\t\t\t\tSDLActivity.mGLMajor = majorVersion;\n\t\t\t\tSDLActivity.mGLMinor = minorVersion;\n\n\t\t\t\tSDLActivity.createEGLSurface();\n\t\t\t} catch (Exception e) {\n\t\t\t\tLog.v(\"SDL\", e + \"\");\n\t\t\t\tfor (StackTraceElement s : e.getStackTrace()) {\n\t\t\t\t\tLog.v(\"SDL\", s.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t} else\n\t\t\tSDLActivity.createEGLSurface();\n\n\t\treturn true;\n\t}\n\n\tpublic static boolean createEGLContext() {\n\t\tEGL10 egl = (EGL10) EGLContext.getEGL();\n\t\tint EGL_CONTEXT_CLIENT_VERSION = 0x3098;\n\t\tint contextAttrs[] = new int[] { EGL_CONTEXT_CLIENT_VERSION,\n\t\t\t\tSDLActivity.mGLMajor, EGL10.EGL_NONE };\n\t\tSDLActivity.mEGLContext = egl.eglCreateContext(SDLActivity.mEGLDisplay,\n\t\t\t\tSDLActivity.mEGLConfig, EGL10.EGL_NO_CONTEXT, contextAttrs);\n\t\tif (SDLActivity.mEGLContext == EGL10.EGL_NO_CONTEXT) {\n\t\t\tLog.e(\"SDL\", \"Couldn't create context\");\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static boolean createEGLSurface() {\n\t\tif (SDLActivity.mEGLDisplay != null && SDLActivity.mEGLConfig != null) {\n\t\t\tEGL10 egl = (EGL10) EGLContext.getEGL();\n\t\t\tif (SDLActivity.mEGLContext == null)\n\t\t\t\tcreateEGLContext();\n\n\t\t\tLog.v(\"SDL\", \"Creating new EGL Surface\");\n\t\t\tEGLSurface surface = egl.eglCreateWindowSurface(SDLActivity.mEGLDisplay,\n\t\t\t\t\tSDLActivity.mEGLConfig, SDLActivity.mSurface, null);\n\t\t\tif (surface == EGL10.EGL_NO_SURFACE) {\n\t\t\t\tLog.e(\"SDL\", \"Couldn't create surface\");\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!egl.eglMakeCurrent(SDLActivity.mEGLDisplay, surface, surface,\n\t\t\t\t\tSDLActivity.mEGLContext)) {\n\t\t\t\tLog.e(\"SDL\", \"Old EGL Context doesnt work, trying with a new one\");\n\t\t\t\tcreateEGLContext();\n\t\t\t\tif (!egl.eglMakeCurrent(SDLActivity.mEGLDisplay, surface, surface,\n\t\t\t\t\t\tSDLActivity.mEGLContext)) {\n\t\t\t\t\tLog.e(\"SDL\", \"Failed making EGL Context current\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSDLActivity.mEGLSurface = surface;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static boolean createGLContext(int majorVersion, int minorVersion) {\n\t\treturn initEGL(majorVersion, minorVersion);\n\t}\n\n\tpublic static void flipBuffers() {\n\t\tflipEGL();\n\t}\n\n\t// EGL buffer flip\n\tpublic static void flipEGL() {\n\t\ttry {\n\t\t\tEGL10 egl = (EGL10) EGLContext.getEGL();\n\n\t\t\tegl.eglWaitNative(EGL10.EGL_CORE_NATIVE_ENGINE, null);\n\n\t\t\t// drawing here\n\n\t\t\tegl.eglWaitGL();\n\n\t\t\tegl.eglSwapBuffers(SDLActivity.mEGLDisplay, SDLActivity.mEGLSurface);\n\n\t\t} catch (Exception e) {\n\t\t\tLog.v(\"SDL\", \"flipEGL(): \" + e);\n\t\t\tfor (StackTraceElement s : e.getStackTrace()) {\n\t\t\t\tLog.v(\"SDL\", s.toString());\n\t\t\t}\n\t\t}\n\t}\n\n\t// Events\n\tprotected void onPause() {\n\t\tsuper.onPause();\n\t\tLog.d(getClass().getSimpleName(), \"onPause()\");\n\n\t\t// Attempt to autosave.\n\t\tif (hasGameLoaded) {\n\t\t\tcthTryAutoSave(\"cthAndroidAutoSave.sav\");\n\t\t}\n\n\t\tif (wake != null && wake.isHeld()) {\n\t\t\tLog.d(getClass().getSimpleName(), \"Releasing wakelock\");\n\t\t\twake.release();\n\t\t}\n\n\t}\n\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tLog.d(getClass().getSimpleName(), \"onResume()\");\n\n\t\tif (config.getKeepScreenOn()) {\n\t\t\tLog.d(getClass().getSimpleName(), \"Getting wakelock\");\n\t\t\tPowerManager powerManager = (PowerManager) getSystemService(Context.POWER_SERVICE);\n\t\t\twake = powerManager.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK,\n\t\t\t\t\t\"Keep Screen On Wakelock\");\n\t\t\twake.acquire();\n\t\t}\n\n\t}\n\n\tprivate void restartActivity() {\n\t\tIntent intent = getIntent();\n\t\tfinish();\n\t\tstartActivity(intent);\n\t}\n\n\t// Java functions called from C\n\n\tpublic static void setActivityTitle(String title) {\n\t}\n\n\t// Send a message from the SDLMain thread\n\n\tpublic static void sendCommand(Command command, Object data) {\n\t\tsendCommand(command.ordinal(), data);\n\t}\n\n\tpublic static void sendCommand(int cmd, int data) {\n\t\tsendCommand(cmd, Integer.valueOf(data));\n\t}\n\n\tpublic static void sendCommand(int cmd) {\n\t\tsendCommand(cmd, null);\n\t}\n\n\tpublic static void sendCommand(int cmd, Object data) {\n\t\tMessage msg = mSingleton.commandHandler.obtainMessage();\n\t\tmsg.arg1 = cmd;\n\t\tmsg.obj = data;\n\t\tmSingleton.commandHandler.sendMessage(msg);\n\t}\n\n\tpublic static Object audioInit(int sampleRate, boolean is16Bit,\n\t\t\tboolean isStereo, int desiredFrames) {\n\t\tint channelConfig = isStereo ? AudioFormat.CHANNEL_OUT_STEREO\n\t\t\t\t: AudioFormat.CHANNEL_OUT_MONO;\n\t\tint audioFormat = is16Bit ? AudioFormat.ENCODING_PCM_16BIT\n\t\t\t\t: AudioFormat.ENCODING_PCM_8BIT;\n\t\tint frameSize = (isStereo ? 2 : 1) * (is16Bit ? 2 : 1);\n\n\t\tLog.v(\"SDL\", \"SDL audio: wanted \" + (isStereo ? \"stereo\" : \"mono\") + \" \"\n\t\t\t\t+ (is16Bit ? \"16-bit\" : \"8-bit\") + \" \" + (sampleRate / 1000f) + \"kHz, \"\n\t\t\t\t+ desiredFrames + \" frames buffer\");\n\n\t\t// Let the user pick a larger buffer if they really want -- but ye\n\t\t// gods they probably shouldn't, the minimums are horrifyingly high\n\t\t// latency already\n\t\tdesiredFrames = Math.max(desiredFrames,\n\t\t\t\t(AudioTrack.getMinBufferSize(sampleRate, channelConfig, audioFormat)\n\t\t\t\t\t\t+ frameSize - 1)\n\t\t\t\t\t\t/ frameSize);\n\n\t\tmAudioTrack = new AudioTrack(AudioManager.STREAM_MUSIC, sampleRate,\n\t\t\t\tchannelConfig, audioFormat, desiredFrames * frameSize,\n\t\t\t\tAudioTrack.MODE_STREAM);\n\n\t\taudioStartThread();\n\n\t\tLog.v(\n\t\t\t\t\"SDL\",\n\t\t\t\t\"SDL audio: got \"\n\t\t\t\t\t\t+ ((mAudioTrack.getChannelCount() >= 2) ? \"stereo\" : \"mono\")\n\t\t\t\t\t\t+ \" \"\n\t\t\t\t\t\t+ ((mAudioTrack.getAudioFormat() == AudioFormat.ENCODING_PCM_16BIT) ? \"16-bit\"\n\t\t\t\t\t\t\t\t: \"8-bit\") + \" \" + (mAudioTrack.getSampleRate() / 1000f)\n\t\t\t\t\t\t+ \"kHz, \" + desiredFrames + \" frames buffer\");\n\n\t\tif (is16Bit) {\n\t\t\taudioBuffer = new short[desiredFrames * (isStereo ? 2 : 1)];\n\t\t} else {\n\t\t\taudioBuffer = new byte[desiredFrames * (isStereo ? 2 : 1)];\n\t\t}\n\t\treturn audioBuffer;\n\t}\n\n\tpublic static void audioStartThread() {\n\t\tmAudioThread = new Thread(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tmAudioTrack.play();\n\t\t\t\tnativeRunAudioThread();\n\t\t\t}\n\t\t}, \"Audio Thread\");\n\n\t\t// I'd take REALTIME if I could get it!\n\t\tmAudioThread.setPriority(Thread.MAX_PRIORITY);\n\t\tmAudioThread.start();\n\t}\n\n\tpublic static void audioWriteShortBuffer(short[] buffer) {\n\t\tfor (int i = 0; i < buffer.length;) {\n\t\t\tint result = mAudioTrack.write(buffer, i, buffer.length - i);\n\t\t\tif (result > 0) {\n\t\t\t\ti += result;\n\t\t\t} else if (result == 0) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// Nom nom\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tLog.w(SDLActivity.class.getSimpleName(),\n\t\t\t\t\t\t\"SDL audio: error return from write(short)\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void audioWriteByteBuffer(byte[] buffer) {\n\t\tfor (int i = 0; i < buffer.length;) {\n\t\t\tint result = mAudioTrack.write(buffer, i, buffer.length - i);\n\t\t\tif (result > 0) {\n\t\t\t\ti += result;\n\t\t\t} else if (result == 0) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// Nom nom\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tLog.w(SDLActivity.class.getSimpleName(),\n\t\t\t\t\t\t\"SDL audio: error return from write(byte)\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void audioQuit() {\n\t\tif (mAudioThread != null) {\n\t\t\ttry {\n\t\t\t\tmAudioThread.join();\n\t\t\t} catch (Exception e) {\n\t\t\t\tLog.v(SDLActivity.class.getSimpleName(),\n\t\t\t\t\t\t\"Problem stopping audio thread: \" + e);\n\t\t\t\tBugSenseHandler.sendException(e);\n\t\t\t}\n\t\t\tmAudioThread = null;\n\n\t\t}\n\n\t\tif (mAudioTrack != null) {\n\t\t\tmAudioTrack.stop();\n\t\t\tmAudioTrack = null;\n\t\t}\n\t}\n\n\tstatic class CommandHandler extends Handler {\n\n\t\t// Dialogs\n\t\tprivate SaveDialog\tsaveDialog;\n\t\tprivate LoadDialog\tloadDialog;\n\t\tprivate Dialog\t\t\taboutDialog;\n\t\tprivate MenuDialog\tmainMenuDialog;\n\n\t\tSDLActivity\t\t\t\t\tcontext;\n\n\t\tpublic CommandHandler(SDLActivity context) {\n\t\t\tsuper();\n\t\t\tthis.context = context;\n\n\t\t}\n\n\t\tpublic void cleanUp() {\n\t\t\tsaveDialog = null;\n\t\t\tloadDialog = null;\n\t\t\taboutDialog = null;\n\t\t\tmainMenuDialog = null;\n\t\t}\n\n\t\tpublic void handleMessage(Message msg) {\n\t\t\tInputMethodManager mgr;\n\t\t\tswitch (Command.values()[msg.arg1]) {\n\t\t\t\tcase SHOW_ABOUT_DIALOG:\n\t\t\t\t\tif (aboutDialog == null) {\n\t\t\t\t\t\taboutDialog = DialogFactory.createAboutDialog(context);\n\t\t\t\t\t}\n\t\t\t\t\taboutDialog.show();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HIDE_KEYBOARD:\n\t\t\t\t\tmgr = (InputMethodManager) context\n\t\t\t\t\t\t\t.getSystemService(Context.INPUT_METHOD_SERVICE);\n\t\t\t\t\tmgr.hideSoftInputFromWindow(mSurface.getWindowToken(), 0);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SHOW_KEYBOARD:\n\t\t\t\t\tmgr = (InputMethodManager) context\n\t\t\t\t\t\t\t.getSystemService(Context.INPUT_METHOD_SERVICE);\n\t\t\t\t\tmgr.showSoftInput(mSurface, InputMethodManager.SHOW_FORCED);\n\t\t\t\t\tbreak;\n\t\t\t\tcase QUICK_LOAD:\n\t\t\t\t\tif (Files.doesFileExist(context.config.getSaveGamesPath()\n\t\t\t\t\t\t\t+ \"/quicksave.sav\")) {\n\t\t\t\t\t\tcthLoadGame(\"quicksave.sav\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tToast\n\t\t\t\t\t\t\t\t.makeText(context, \"No quicksave to load!\", Toast.LENGTH_SHORT)\n\t\t\t\t\t\t\t\t.show();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase QUICK_SAVE:\n\t\t\t\t\tcthSaveGame(\"quicksave.sav\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase RESTART_GAME:\n\t\t\t\t\tcthRestartGame();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SHOW_LOAD_DIALOG:\n\t\t\t\t\tif (loadDialog == null) {\n\t\t\t\t\t\tloadDialog = new LoadDialog(context,\n\t\t\t\t\t\t\t\tcontext.config.getSaveGamesPath());\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tloadDialog.updateSaves(context);\n\t\t\t\t\t\tloadDialog.show();\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tBugSenseHandler.sendException(e);\n\n\t\t\t\t\t\tToast.makeText(context, \"Problem loading load dialog\",\n\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SHOW_SAVE_DIALOG:\n\t\t\t\t\tif (saveDialog == null) {\n\t\t\t\t\t\tsaveDialog = new SaveDialog(context,\n\t\t\t\t\t\t\t\tcontext.config.getSaveGamesPath());\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsaveDialog.updateSaves(context);\n\t\t\t\t\t\tsaveDialog.show();\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tBugSenseHandler.sendException(e);\n\t\t\t\t\t\tToast.makeText(context, \"Problem loading save dialog\",\n\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase SHOW_MENU:\n\t\t\t\t\tif (mainMenuDialog == null) {\n\t\t\t\t\t\tmainMenuDialog = new MenuDialog(context);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Pause the game\n\t\t\t\t\tcthGameSpeed(0);\n\t\t\t\t\tmainMenuDialog.show();\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase PAUSE_GAME:\n\t\t\t\t\tcthGameSpeed(0);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SHOW_SETTINGS_DIALOG:\n\t\t\t\t\tcontext.startActivity(new Intent(context, PrefsActivity.class));\n\t\t\t\t\tbreak;\n\t\t\t\tcase GAME_SPEED_UPDATED:\n\t\t\t\t\tcontext.config.setGameSpeed((Integer) msg.obj);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@Override\n\tpublic void onLowMemory() {\n\t\tsuper.onLowMemory();\n\t\tLog.w(getClass().getSimpleName(),\n\t\t\t\t\"Low memory detected. Going to try and tighten our belt!\");\n\n\t\t// Attempt to save first\n\t\tcthTryAutoSave(\"cthAndroidAutoSave.sav\");\n\n\t\t// Remove references to some stuff that can just be regenerated later, so\n\t\t// that the GC can get rid of them.\n\t\tmainMenu = null;\n\t\tcommandHandler.cleanUp();\n\n\t\t// Call LUA GC\n\t\tonNativeLowMemory();\n\n\t}\n}\n\n/**\n * Simple nativeInit() runnable\n */\nclass SDLMain implements Runnable {\n\tprivate String\tlogPath, toLoad;\n\n\tpublic SDLMain(String logPath, String toLoad) {\n\t\tthis.logPath = logPath;\n\t\tthis.toLoad = toLoad;\n\n\t}\n\n\tpublic void run() {\n\t\t// Runs SDL_main()\n\t\tSDLActivity.nativeInit(logPath, toLoad);\n\n\t\tLog.v(getClass().getSimpleName(), \"SDL thread terminated\");\n\t}\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":22100}]],"length":22100}
